{
  "name": "datadog-triggered-incident-workflow-dag",
  "description": "Dynamic Production incident response workflow with AI investigation and Slack integration powered by Kubiya workflows - https://docs.kubiya.ai",
  "params": {
    "incident_id": "$INCIDENT_PUBLIC_ID",
    "incident_title": "$INCIDENT_TITLE",
    "incident_severity": "$INCIDENT_SEVERITY",
    "incident_priority": "High",
    "incident_body": "$INCIDENT_MSG",
    "incident_url": "$INCIDENT_URL",
    "incident_source": "datadog",
    "incident_owner": "devops",
    "slack_channel_id": "#inc-$INCIDENT_PUBLIC_ID-$INCIDENT_TITLE",
    "notification_channels": "#kubi-incident-testing",
    "escalation_channel": "#kubi-incident-testing",
    "investigation_timeout": "1200",
    "max_retries": "3",
    "customer_impact": "UNKNOWN",
    "affected_services": "NA",
    "dd_environment": "na-integration",
    "k8s_environment": "p44-qa-integration",
    "normalize_channel_name": "true"
  },
  "env": {
    "KUBIYA_USER_EMAIL": "${KUBIYA_USER_EMAIL}",
    "KUBIYA_API_KEY": "${KUBIYA_API_KEY}",
    "KUBIYA_USER_ORG": "${KUBIYA_USER_ORG}",
    "KUBIYA_AUTOMATION": "1",
    "INCIDENT_SEVERITY": "medium",
    "INCIDENT_PRIORITY": "medium",
    "CHATOPS_NA_AGENT_UUID": "9c6c370c-e289-411f-9c06-2cacc5d10153",
    "CHATOPS_EU_AGENT_UUID": "dd354944-fd6f-404c-bf67-090d7e8cfe60",
    "CHATOPS_INTEGRATION_AGENT_UUID": "20a1366f-4c82-4041-bd9d-29b635b98554"
  },
  "steps": [
    {
      "name": "validate-incident",
      "command": "echo \"\ud83d\udd0d VALIDATING INCIDENT PARAMETERS\"\necho \"=================================\"\nVALIDATION_PASSED=true\nMISSING_PARAMS=\"\"\n\nif [ -z \"${incident_id}\" ]; then\n  echo \"\u274c ERROR: incident_id is required\"\n  VALIDATION_PASSED=false\n  MISSING_PARAMS=\"${MISSING_PARAMS} incident_id\"\nfi\n\nif [ -z \"${incident_title}\" ]; then\n  echo \"\u274c ERROR: incident_title is required\"\n  VALIDATION_PASSED=false\n  MISSING_PARAMS=\"${MISSING_PARAMS} incident_title\"\nfi\n\nif [ -z \"${incident_severity}\" ]; then\n  echo \"\u274c ERROR: incident_severity is required\"\n  VALIDATION_PASSED=false\n  MISSING_PARAMS=\"${MISSING_PARAMS} incident_severity\"\nfi\n\nif [ -z \"${affected_services}\" ]; then\n  echo \"\u26a0\ufe0f WARNING: affected_services not provided - will create validation agent\"\nfi\n\ncase \"${incident_severity}\" in\n  \"critical\"|\"high\"|\"medium\"|\"low\")\n    echo \"\u2705 Severity ${incident_severity} is valid\"\n    ;;\n  *)\n    echo \"\u274c ERROR: Invalid severity ${incident_severity}. Must be: critical, high, medium, or low\"\n    VALIDATION_PASSED=false\n    MISSING_PARAMS=\"${MISSING_PARAMS} valid_severity\"\n    ;;\nesac\n\nif [ \"$VALIDATION_PASSED\" = \"true\" ]; then\n  echo \"\ud83d\udccb INCIDENT METADATA:\"\n  echo \"  ID: ${incident_id}\"\n  echo \"  Title: ${incident_title}\"\n  echo \"  Severity: ${incident_severity}\"\n  echo \"  Priority: ${incident_priority}\"\n  echo \"  Owner: ${incident_owner}\"\n  echo \"  Source: ${incident_source}\"\n  echo \"  Affected Services: ${affected_services:-TBD via agent}\"\n  echo \"  Customer Impact: ${customer_impact}\"\n  echo \"\"\n  echo \"\u2705 Incident validation completed successfully\"\nelse\n  echo \"\u274c Validation failed. Missing parameters: ${MISSING_PARAMS}\"\n  echo \"\u26a0\ufe0f Continuing workflow to handle validation failure...\"\nfi\n",
      "description": "Validate incident parameters and prerequisites",
      "executor": {
        "type": "command",
        "config": {}
      },
      "depends": [],
      "output": "validation_status"
    },
    {
      "name": "investigate-chatops-na",
      "description": "NA production investigation using chatops-na agent",
      "executor": {
        "type": "agent",
        "config": {
          "agent_name": "chatops-na",
          "model": "gpt-4o",
          "message": "Production Incident Investigation - NA Region. Incident ID: ${incident_id}. Title: ${incident_title}. Severity: ${incident_severity}. Description: ${incident_body}. Please conduct thorough investigation including cluster health, pod status, logs analysis, and provide root cause with remediation steps."
        }
      },
      "depends": [
        "validate-incident"
      ],
      "output": "na_results",
      "continueOn": {
        "failure": true
      }
    },
    {
      "name": "investigate-chatops-eu",
      "description": "EU region investigation using chatops-eu agent",
      "executor": {
        "type": "agent",
        "config": {
          "agent_name": "chatops-eu",
          "model": "gpt-4o",
          "message": "Production Incident Investigation - EU Region. Incident ID: ${incident_id}. Title: ${incident_title}. Severity: ${incident_severity}. Description: ${incident_body}. Please conduct thorough investigation including cluster health, pod status, logs analysis, and provide root cause with remediation steps."
        }
      },
      "depends": [
        "validate-incident"
      ],
      "output": "eu_results",
      "continueOn": {
        "failure": true
      }
    },
    {
      "name": "investigate-chatops-na-integration",
      "description": "Integration environment investigation using chatops-na-integration agent",
      "executor": {
        "type": "agent",
        "config": {
          "agent_name": "chatops-na-integration",
          "model": "gpt-4o",
          "message": "Production Incident Investigation - Integration Environment. Incident ID: ${incident_id}. Title: ${incident_title}. Severity: ${incident_severity}. Description: ${incident_body}. Please conduct thorough investigation including cluster health, pod status, logs analysis, and provide root cause with remediation steps."
        }
      },
      "depends": [
        "validate-incident"
      ],
      "output": "integration_results",
      "continueOn": {
        "failure": true
      }
    },
    {
      "name": "normalize-channel-name",
      "description": "Normalize the channel name by replacing spaces with underscores and converting to lower case",
      "command": "echo 'üìù NORMALIZING SLACK CHANNEL NAME'\necho 'Original: ${slack_channel_id}'\n\n# Start with the original channel name\nNORMALIZED=\"${slack_channel_id}\"\n\n# Ensure it starts with # if not already\nif [[ \"$NORMALIZED\" != \\#* ]]; then\n  NORMALIZED=\"#$NORMALIZED\"\nfi\n\n# Convert to lowercase first\nNORMALIZED=$(echo \"$NORMALIZED\" | tr '[:upper:]' '[:lower:]')\n\n# Replace spaces with underscores\nNORMALIZED=$(echo \"$NORMALIZED\" | sed 's/ /_/g')\n\n# Replace any other special characters (except # - _) with underscores\nNORMALIZED=$(echo \"$NORMALIZED\" | sed 's/[^a-z0-9#_-]/_/g')\n\n# Remove multiple consecutive underscores\nNORMALIZED=$(echo \"$NORMALIZED\" | sed 's/_\\+/_/g')\n\n# Remove leading/trailing underscores (but keep the #)\nNORMALIZED=$(echo \"$NORMALIZED\" | sed 's/#_/#/' | sed 's/_$//')\n\n# Ensure channel name is not too long (Slack limit is 80 chars)\nif [ ${#NORMALIZED} -gt 80 ]; then\n  NORMALIZED=${NORMALIZED:0:80}\nfi\n\necho \"Normalized: $NORMALIZED\"\n# Output only the normalized channel name for other steps to use\necho \"$NORMALIZED\" > /tmp/normalized_channel\necho \"$NORMALIZED\"",
      "depends": [
        "validate-incident"
      ],
      "executor": {
        "type": "command",
        "config": {}
      },
      "output": "NORMALIZED_CHANNEL_NAME"
    },
    {
      "name": "setup-slack-integration",
      "description": "Initialize Slack integration for incident communications",
      "executor": {
        "type": "kubiya",
        "config": {
          "url": "api/v1/integration/slack/token/1",
          "method": "GET",
          "silent": false
        }
      },
      "depends": [
        "normalize-channel-name"
      ],
      "output": "slack_token"
    },
    {
      "name": "debug-slack-token",
      "description": "Debug Slack token availability",
      "command": "echo 'üîç SLACK INTEGRATION DEBUG'\necho '========================'\necho 'SLACK_TOKEN: '${slack_token}\necho 'NORMALIZED_CHANNEL: '${NORMALIZED_CHANNEL_NAME}\necho 'ORIGINAL_CHANNEL: '${slack_channel_id}\necho 'INCIDENT_ID: '${incident_id}\necho 'INCIDENT_TITLE: '${incident_title}\necho 'ENVIRONMENT: '${environment}\necho ''\necho 'TOKEN VALIDATION:'\nif [ -z \"${slack_token}\" ]; then echo '‚ùå TOKEN IS EMPTY'; else echo '‚úÖ TOKEN EXISTS'; fi\nif [ \"${slack_token}\" = \"null\" ]; then echo '‚ùå TOKEN IS NULL'; else echo '‚úÖ TOKEN IS NOT NULL'; fi\nif [ -z \"${NORMALIZED_CHANNEL_NAME}\" ]; then echo '‚ùå CHANNEL NAME IS EMPTY'; else echo '‚úÖ CHANNEL NAME EXISTS'; fi\necho ''\necho 'READY FOR SLACK POSTING'",
      "executor": {
        "type": "command",
        "config": {}
      },
      "depends": [
        "normalize-channel-name"
      ],
      "output": "slack_debug_info"
    },
    {
      "name": "validation_failure_message",
      "command": "if [ \"$VALIDATION_PASSED\" != \"true\" ]; then\n  echo \"\u26a0\ufe0f VALIDATION FAILURE DETECTED: Creating support agent to help\"\n  echo \"Missing required parameters: ${MISSING_PARAMS}\"\n  echo \"Will create an intelligent agent to assist with parameter collection\"\nelse\n  echo \"\u2705 All required parameters present\"\nfi\n",
      "description": "Prepare validation failure message if parameters are missing",
      "executor": {
        "type": "command",
        "config": {}
      },
      "depends": [
        "debug-slack-token"
      ],
      "output": "validation_failure_message"
    },
    {
      "name": "prepare-agent-context",
      "command": "echo \"\ud83d\udd0d PREPARING AGENT CONTEXT\"\necho \"========================\"\nREGION_FOLLOWUP_PROMPT=\"Investigate production incident ${incident_id} - ${incident_title} (${incident_severity} severity) affecting ${affected_services} in ${region_name}.\"\necho \"REGION_FOLLOWUP_PROMPT=${REGION_FOLLOWUP_PROMPT}\"\necho \"\u2705 Agent context prepared successfully\"\n",
      "description": "Prepare simplified context for agent interactions",
      "executor": {
        "type": "command",
        "config": {}
      },
      "depends": [
        "normalize-channel-name"
      ],
      "output": "agent_context"
    },
    {
      "name": "post-incident-alert",
      "command": "echo 'üö® POSTING INCIDENT ALERT'\necho '========================'\n\n# Check if we have a Slack token\nif [ -z \"${slack_token}\" ] || [ \"${slack_token}\" = \"null\" ]; then\n  echo '‚ö†Ô∏è No Slack token available - skipping Slack alert'\n  echo '‚úÖ Incident alert skipped (no Slack integration)'\n  exit 0\nfi\n\n# Normalize channel name\nCHANNEL_NORMALIZED=$(echo \"${slack_channel_id}\" | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g' | sed 's/[^a-z0-9#_-]/_/g' | sed 's/_\\+/_/g')\n\necho \"Original channel: ${slack_channel_id}\"\necho \"Normalized channel: ${CHANNEL_NORMALIZED}\"\n\n# Set severity emoji\nSEVERITY_EMOJI=''\ncase \"${incident_severity}\" in\n  critical) SEVERITY_EMOJI='üî¥' ;;\n  high) SEVERITY_EMOJI='üü†' ;;\n  medium) SEVERITY_EMOJI='üü°' ;;\n  low) SEVERITY_EMOJI='üü¢' ;;\n  *) SEVERITY_EMOJI='‚ö™' ;;\nesac\n\necho \"Using severity emoji: ${SEVERITY_EMOJI} for ${incident_severity}\"\n\n# Create JSON payload using heredoc to avoid escaping issues\ncat > /tmp/slack_payload.json << EOF\n{\n  \"channel\": \"${CHANNEL_NORMALIZED}\",\n  \"text\": \"üö® INCIDENT: ${incident_title}\",\n  \"blocks\": [\n    {\n      \"type\": \"header\",\n      \"text\": {\n        \"type\": \"plain_text\",\n        \"text\": \"üö® PRODUCTION INCIDENT ALERT\",\n        \"emoji\": true\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*${incident_title}*\"\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"fields\": [\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*ID:* ${incident_id}\"\n        },\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Severity:* ${SEVERITY_EMOJI} ${incident_severity}\"\n        }\n      ]\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"${incident_body}\"\n      }\n    },\n    {\n      \"type\": \"actions\",\n      \"elements\": [\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"üìä View on Datadog\",\n            \"emoji\": true\n          },\n          \"url\": \"${incident_url}\",\n          \"style\": \"primary\"\n        }\n      ]\n    }\n  ]\n}\nEOF\n\necho 'Posting alert to Slack...'\nRESPONSE=$(curl -s -X POST https://slack.com/api/chat.postMessage \\\n  -H \"Authorization: Bearer ${slack_token.token}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @/tmp/slack_payload.json)\n\necho \"Slack API Response: ${RESPONSE}\"\n\nif echo \"${RESPONSE}\" | grep -q '\"ok\":true'; then\n  echo '‚úÖ Incident alert posted successfully to Slack!'\nelse\n  echo '‚ö†Ô∏è Failed to post incident alert to Slack - continuing workflow'\n  echo \"Response: ${RESPONSE}\"\nfi\n\necho '‚úÖ Alert step completed'\n",
      "description": "Send beautiful incident alert to Slack when services are provided",
      "executor": {
        "type": "command",
        "config": {}
      },
      "depends": [
        "setup-slack-integration"
      ],
      "output": "initial_alert_message",
      "continueOn": {
        "failure": true
      }
    },
    {
      "name": "notify-investigation-progress",
      "command": "echo 'INVESTIGATION PROGRESS - ONLY POST WHEN AGENTS START'\necho '==================================================='\n\n# Post progress notification for LLM-classified agent investigation\necho \"Classified agent: ${classified_agent}\"\necho 'Investigation starting with AI-selected agent'\n\n# Check if we have Slack token\nif [ -z \"${slack_token}\" ] || [ \"${slack_token}\" = \"null\" ] || [ \"${slack_token}\" = \"\" ]; then\n  echo 'No Slack token available - skipping progress notification'\n  exit 0\nfi\n\necho \"Posting to channel: ${NORMALIZED_CHANNEL_NAME}\"\n\n# Simple progress message\nPAYLOAD='{\"channel\":\"'${NORMALIZED_CHANNEL_NAME}'\",\"text\":\"üîç AI Investigation Started\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"üîç *AI Investigation Started*\\n'${incident_title}'\"}}]}'\n\necho 'Posting progress to Slack...'\nRESPONSE=$(curl -s -X POST https://slack.com/api/chat.postMessage \\\n  -H \"Authorization: Bearer ${slack_token.token}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"${PAYLOAD}\")\n\necho \"Slack Response: ${RESPONSE}\"\n\nif echo \"${RESPONSE}\" | grep -q '\"ok\":true'; then\n  echo 'Investigation progress posted to Slack'\nelse\n  echo 'Investigation progress posting failed'\nfi",
      "description": "Post investigation progress update AFTER agents start",
      "executor": {
        "type": "command",
        "config": {}
      },
      "depends": [
        "aggregate-investigation-results"
      ],
      "output": "investigation_progress_message",
      "continueOn": {
        "failure": true
      }
    },
    {
      "name": "prepare-investigation-instructions",
      "description": "Prepare detailed investigation instructions for the agent",
      "executor": {
        "type": "command",
        "config": {}
      },
      "command": "cat << 'EOF'\nüö® PRODUCTION INCIDENT INVESTIGATION - ${region_name}\n\n**INCIDENT DETAILS:**\n- **Public ID:** ${incident_id}\n- **Title:** ${incident_title}\n- **Severity:** ${incident_severity}\n- **Priority:** ${incident_priority}\n- **Customer Impact:** ${customer_impact}\n- **Affected Services:** ${affected_services}\n\n**INVESTIGATION CHECKLIST:**\n\n### 1. CLUSTER HEALTH & NODES\nkubectl get nodes -o wide\nkubectl describe nodes | grep -E \"Conditions|Capacity|Allocatable\"\nkubectl top nodes\nkubectl get events --sort-by='.lastTimestamp' | tail -20\n\n### 2. POD STATUS & HEALTH\nkubectl get pods --all-namespaces -o wide | grep -v Running | head -20\nkubectl get pods -n production -o wide | grep -E \"Error|CrashLoop|Pending|Failed\"\nkubectl describe pods -n production | grep -E \"Warning|Error|Failed\" | head -30\nkubectl top pods -n production --sort-by=cpu | head -10\n\n### 3. SERVICE DISCOVERY & NETWORKING\nkubectl get svc --all-namespaces\nkubectl get ingress --all-namespaces\nkubectl get endpoints --all-namespaces | grep -v \"<none>\"\nnslookup kubernetes.default.svc.cluster.local\n\n### 4. APPLICATION SPECIFIC CHECKS\nkubectl logs deployment/${affected_services} -n production --tail=50 | grep -E \"ERROR|WARN|FATAL|Exception\"\nkubectl describe deployment ${affected_services} -n production | grep -E \"Warning|Error|Failed|Ready\"\nkubectl get hpa,pdb -n production | grep ${affected_services}\nkubectl exec deployment/${affected_services} -n production -- curl -s localhost:8080/health | head -10\n\n### 5. RESOURCE UTILIZATION\nkubectl top pods -n production --containers\nkubectl describe limits -n production\nkubectl get pvc -n production -o wide\ndf -h\n\n**INVESTIGATION REQUEST:**\nPlease conduct a thorough investigation of this ${incident_severity} severity incident affecting ${affected_services}. Provide detailed analysis, root cause identification, and actionable remediation steps.\nEOF",
      "depends": [
        "normalize-channel-name"
      ],
      "output": "investigation_instructions"
    },
    {
      "name": "aggregate-investigation-results",
      "description": "Aggregate all investigation results and create comprehensive analysis",
      "executor": {
        "type": "agent",
        "config": {
          "agent_name": "chatops-na",
          "model": "gpt-4o",
          "message": "Aggregate Investigation Results. Incident ID: ${incident_id}. Title: ${incident_title}. Severity: ${incident_severity}. Please analyze and combine the following investigation results from multiple regions/environments: NA Results: ${na_results}. EU Results: ${eu_results}. Integration Results: ${integration_results}. Create a comprehensive analysis identifying the most relevant findings, root cause, and actionable remediation steps."
        }
      },
      "depends": [
        "investigate-chatops-na",
        "investigate-chatops-eu", 
        "investigate-chatops-na-integration"
      ],
      "output": "aggregated_results",
      "continueOn": {
        "failure": true
      }
    },
    {
      "name": "create-executive-summary",
      "description": "Create executive summary using aggregated results",
      "executor": {
        "type": "agent",
        "config": {
          "agent_name": "chatops-na",
          "model": "gpt-4o",
          "message": "Create Executive Summary. Incident ID: ${incident_id}. Title: ${incident_title}. Severity: ${incident_severity}. Description: ${incident_body}. Investigation Results: ${aggregated_results}. Based on these aggregated investigation results from multiple regions/environments, provide comprehensive executive summary including incident overview, key findings, root cause analysis, impact assessment, and recommended actions for stakeholders."
        }
      },
      "depends": [
        "aggregate-investigation-results"
      ],
      "output": "executive_summary",
      "continueOn": {
        "failure": true
      }
    },
    {
      "name": "post-investigation-summary",
      "description": "Post investigation summary to Slack",
      "depends": [
        "create-executive-summary"
      ],
      "executor": {
        "type": "command",
        "config": {}
      },
      "command": "echo 'üìã POSTING INVESTIGATION SUMMARY TO SLACK'\necho '======================================='\n\n# Check if we have a Slack token\nif [ -z \"${slack_token}\" ] || [ \"${slack_token}\" = \"null\" ]; then\n  echo '‚ö†Ô∏è No Slack token available - skipping summary post'\n  echo '‚úÖ Summary post skipped (no Slack integration)'\n  exit 0\nfi\n\n# Normalize channel name same as initial alert\nCHANNEL_NORMALIZED=$(echo \"${slack_channel_id}\" | tr '[:upper:]' '[:lower:]' | sed 's/ /_/g' | sed 's/[^a-z0-9#_-]/_/g' | sed 's/_\\+/_/g')\n\necho \"Posting investigation summary to: ${CHANNEL_NORMALIZED}\"\n\n# Set severity emoji\nSEVERITY_EMOJI=''\ncase \"${incident_severity}\" in\n  critical) SEVERITY_EMOJI='üî¥' ;;\n  high) SEVERITY_EMOJI='üü†' ;;\n  medium) SEVERITY_EMOJI='üü°' ;;\n  low) SEVERITY_EMOJI='üü¢' ;;\n  *) SEVERITY_EMOJI='‚ö™' ;;\nesac\n\n# Agent UUIDs for action buttons (these would be environment variables in real deployment)\nNA_AGENT_UUID=\"${CHATOPS_NA_AGENT_UUID:-chatops-na-12345}\"\nEU_AGENT_UUID=\"${CHATOPS_EU_AGENT_UUID:-chatops-eu-67890}\"\nINTEGRATION_AGENT_UUID=\"${CHATOPS_INTEGRATION_AGENT_UUID:-chatops-integration-abcde}\"\n\n# Create comprehensive investigation summary\ncat > /tmp/investigation_summary.json << EOF\n{\n  \"channel\": \"${CHANNEL_NORMALIZED}\",\n  \"text\": \"‚úÖ AI Investigation Complete - ${incident_title}\",\n  \"blocks\": [\n    {\n      \"type\": \"header\",\n      \"text\": {\n        \"type\": \"plain_text\",\n        \"text\": \"üö® INCIDENT INVESTIGATION COMPLETE\",\n        \"emoji\": true\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"fields\": [\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Incident ID:* ${incident_id}\"\n        },\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Severity:* ${SEVERITY_EMOJI} ${incident_severity}\"\n        },\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Status:* Investigation Complete\"\n        },\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"*Environments:* NA, EU, Integration\"\n        }\n      ]\n    },\n    {\n      \"type\": \"divider\"\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*üîç Executive Summary:*\\n${executive_summary}\"\n      }\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*üìä Investigation Results:*\\n${aggregated_results}\"\n      }\n    },\n    {\n      \"type\": \"divider\"\n    },\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*üè• Health Status Summary:*\\n‚Ä¢ NA Region: Investigated\\n‚Ä¢ EU Region: Investigated\\n‚Ä¢ Integration Environment: Investigated\\n\\n*üîß Recommended Actions:* Review investigation results and proceed with remediation as needed.\"\n      }\n    },\n    {\n      \"type\": \"divider\"\n    },\n    {\n      \"type\": \"actions\",\n      \"elements\": [\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"üîó View Datadog Alert\",\n            \"emoji\": true\n          },\n          \"url\": \"${incident_url}\",\n          \"style\": \"primary\"\n        },\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"üá∫üá∏ Investigate NA Further\",\n            \"emoji\": true\n          },\n          \"value\": \"{\\\"agent_uuid\\\": \\\"${NA_AGENT_UUID}\\\", \\\"message\\\": \\\"Help me triage the incident ${incident_id} - ${incident_title}. I need detailed investigation of NA production environment including cluster health, pod status, logs analysis, and specific remediation steps.\\\"}\",\n          \"action_id\": \"agent.process_message_na\"\n        },\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"üá™üá∫ Investigate EU Further\",\n            \"emoji\": true\n          },\n          \"value\": \"{\\\"agent_uuid\\\": \\\"${EU_AGENT_UUID}\\\", \\\"message\\\": \\\"Help me triage the incident ${incident_id} - ${incident_title}. I need detailed investigation of EU production environment including cluster health, pod status, logs analysis, and specific remediation steps.\\\"}\",\n          \"action_id\": \"agent.process_message_eu\"\n        }\n      ]\n    },\n    {\n      \"type\": \"actions\",\n      \"elements\": [\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"üß™ Investigate Integration Further\",\n            \"emoji\": true\n          },\n          \"value\": \"{\\\"agent_uuid\\\": \\\"${INTEGRATION_AGENT_UUID}\\\", \\\"message\\\": \\\"Help me triage the incident ${incident_id} - ${incident_title}. I need detailed investigation of integration environment including cluster health, pod status, logs analysis, and specific remediation steps.\\\"}\",\n          \"action_id\": \"agent.process_message_integration\"\n        },\n        {\n          \"type\": \"button\",\n          \"text\": {\n            \"type\": \"plain_text\",\n            \"text\": \"üìã Generate Full Report\",\n            \"emoji\": true\n          },\n          \"value\": \"{\\\"agent_uuid\\\": \\\"${NA_AGENT_UUID}\\\", \\\"message\\\": \\\"Generate a comprehensive incident report for ${incident_id} - ${incident_title} including all investigation findings, root cause analysis, timeline, impact assessment, and recommended preventive measures.\\\"}\",\n          \"action_id\": \"agent.process_message_report\"\n        }\n      ]\n    },\n    {\n      \"type\": \"context\",\n      \"elements\": [\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": \"‚ö° Click any button above to continue investigation with AI agents | üïê Investigation completed at $(date)\"\n        }\n      ]\n    }\n  ]\n}\nEOF\n\necho 'Posting comprehensive investigation summary to Slack...'\nRESPONSE=$(curl -s -X POST https://slack.com/api/chat.postMessage \\\n  -H \"Authorization: Bearer ${slack_token.token}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @/tmp/investigation_summary.json)\n\necho \"Slack API Response: ${RESPONSE}\"\n\nif echo \"${RESPONSE}\" | grep -q '\"ok\":true'; then\n  echo '‚úÖ Investigation summary posted successfully to Slack!'\nelse\n  echo '‚ö†Ô∏è Failed to post investigation summary to Slack'\n  echo \"Response: ${RESPONSE}\"\nfi\n\necho '‚úÖ Investigation summary step completed'\n",
      "output": "summary_post_status",
      "continueOn": {
        "failure": true
      }
    }
  ]
}
